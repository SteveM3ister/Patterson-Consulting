class(Auto$mpg)
Auto$mpg%<>%factor()
ra_best<-svm(mpg~.,data=Auto,kernel="radial",cost=1,gamma=0.5,degree=2)
po_best<-svm(mpg~.,data=Auto,kernel="polynomial",cost=0.001,gamma=2,degree=3)
plot(ra_best,Auto,mpg~horsepower)
Auto$mpg%<>%as.numeric()
View(Auto)
Auto$mpg<-Auto$mpg-1
ra_best<-svm(mpg~.,data=Auto,kernel="radial",cost=1,gamma=0.5,degree=2)
po_best<-svm(mpg~.,data=Auto,kernel="polynomial",cost=0.001,gamma=2,degree=3)
plot(ra_best,Auto,mpg~horsepower)
plot(po_best,Auto,mpg~horsepower)
names(Auto)
Auto$mpg%<>%as.factor()
ra_best<-svm(mpg~.,data=Auto,kernel="radial",cost=1,gamma=0.5,degree=2)
po_best<-svm(mpg~.,data=Auto,kernel="polynomial",cost=0.001,gamma=2,degree=3)
plotvar = function(model) {
for (name in names(Auto)[-1]) {
plot(model, Auto, as.formula(paste("mpg~", name, sep = "")))
}
}
plotvar(ra_best)
Auto$mpg%<>%as.numeric()
Auto$mpg=Auto$mpg-1
View(Auto)
ra_best<-svm(mpg~.,data=Auto,kernel="radial",cost=1,gamma=0.5,degree=2)
po_best<-svm(mpg~.,data=Auto,kernel="polynomial",cost=0.001,gamma=2,degree=3)
plotvar = function(model) {
for (name in names(Auto)[-1]) {
plot(model, Auto, as.formula(paste("mpg~", name, sep = "")))
}
}
plotvar(ra_best)
plotvar(po_best)
plot(m_svm3)
plot(m_svm3,df2,y~x1^2)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load("knitr","ggplot2","dplyr","tidyverse","magrittr","ISLR","e1071","SparseM")
plot(m_svm3,df2,y~x1^2)
x1<-c(3,2,4,1,2,4,4)
x2<-c(4,2,4,4,1,3,1)
y<-c("red","red","red","red","blue","blue","blue")
d1<-data.frame(x1,x2,y)
ggplot(data=d1,aes(x1,x2,col=factor(y)))+geom_point()+scale_color_manual(values = c("blue", "red"))
fit1<-svm(factor(y)~.,data=d1,kernel="linear",cost=10,scale=FALSE)
plot(fit1,d1)
ra_best<-svm(mpg~.,data=Auto,kernel="radial",cost=1,gamma=0.5,degree=2)
po_best<-svm(mpg~.,data=Auto,kernel="polynomial",cost=0.001,gamma=2,degree=3)
plotvar = function(model) {
for (name in names(Auto)[-1]) {
plot(model, Auto, as.formula(paste("mpg~", name, sep = "")))
}
}
plotvar(ra_best)
plotvar(po_best)
plot(ra_best,Auto,mpg~cylinders)
plot(ra_best,Auto,mpg~weight)
class(Auto)
Auto$origin
View(Auto)
class(Auto$name)
plot(ra_best,auto,mpg~name)
Auto$mpg%<>%as.factor()
set.seed(1)
tune_gas<-tune(svm,mpg~.,data=Auto,kernel="linear",ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
summary(tune_gas)
tune_gas2<-tune(svm,mpg~.,data=Auto,kernel="radial",ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100),gamma=c(0.5,1,2,3,4),degree=c(2,3,4,5,6)))
tune_gas3<-tune(svm,mpg~.,data=Auto,kernel="polynomial",ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100),gamma=c(0.5,1,2,3,4),degree=c(2,3,4,5,6)))
unique(Auto$name)
nrow(Auto)
summary(tune_gas2)
summary(tune_gas3)
ra_best<-svm(mpg~.,data=Auto,kernel="radial",cost=1,gamma=1,degree=2)
po_best<-svm(mpg~.,data=Auto,kernel="polynomial",cost=0.01,gamma=1,degree=3)
plotvar = function(model) {
for (name in names(Auto)[-1]) {
plot(model, Auto, as.formula(paste("mpg~", name, sep = "")))
}
}
plotvar(ra_best)
summary(ra_best)
summary(po_best)
x1<-c(3,2,4,1,2,4,4)
x2<-c(4,2,4,4,1,3,1)
y<-c("red","red","red","red","blue","blue","blue")
d1<-data.frame(x1,x2,y)
ggplot(data=d1,aes(x1,x2,col=factor(y)))+geom_point()+scale_color_manual(values = c("blue", "red"))
fit1<-svm(factor(y)~.,data=d1,kernel="linear",cost=10,scale=FALSE)
plot(fit1,d1)
class(y)
Auto$mpg%<>%as.character()
View(Auto)
plotvar(ra_best,Auto)
plot(ra_best,Auto)
plot(ra_best,Auto,mpg~cylinders)
plot(ra_best,Auto,mpg~weight)
Auto$mpg%<>%as.numeric()
plot(ra_best,Auto,mpg~weight)
plot(ra_best,Auto)
plot(ra_best,Auto,mpg~name)
names(Auto)
plot(ra_best,Auto,mpg~displacement)
plot(ra_best,Auto,mpg~mpg)
plot(ra_best,Auto,mpg~cylinders)
plotvar = function(model) {
for (name in names(Auto)[-1]) {
plot(model, Auto, as.formula(paste("mpg~", name, sep = "")))
}
}
plotvar(po_best)
po_best$SV
Auto%<>%select(-name)
ra_best<-svm(mpg~.,data=Auto,kernel="radial",cost=1,gamma=1,degree=2)
plot(ra_best,Auto,mpg~cylinders)
Auto$mpg%<>%as.character()
plot(ra_best,Auto,mpg~cylinders)
View(Auto)
Auto$mpg%<>%as.numeric()
plot(ra_best,Auto,mpg~cylinders)
po_best$SV
ra_best<-svm(mpg~.,data=Auto,kernel="radial",cost=1,gamma=1,degree=2)
po_best<-svm(mpg~.,data=Auto,kernel="polynomial",cost=0.01,gamma=1,degree=3)
plot(ra_best,Auto,mpg~cylinders)
View(Auto)
Auto$mpg%<>%as.factor()
plot(ra_best,Auto,mpg~cylinders)
View(Auto)
plotvar(po_best,Auto)
plotvar(po_best)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load("knitr","ggplot2","dplyr","tidyverse","magrittr","ISLR","e1071","SparseM")
Auto$mpg<-ifelse(Auto$mpg>median(Auto$mpg),1,0)
Auto$mpg%<>%as.factor()
Auto%<>%select(-name)
set.seed(1)
tune_gas<-tune(svm,mpg~.,data=Auto,kernel="linear",ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
summary(tune_gas)
ra_best<-svm(mpg~.,data=Auto,kernel="radial",cost=1,gamma=1,degree=2)
po_best<-svm(mpg~.,data=Auto,kernel="polynomial",cost=0.01,gamma=1,degree=3)
plotvar = function(model) {
for (name in names(Auto)[-1]) {
plot(model, Auto, as.formula(paste("mpg~", name, sep = "")))
}
}
plotvar(ra_best)
names(Auto)
Auto$mpg_level<-ifelse(Auto$mpg>median(Auto$mpg),1,0)
Auto$mpg_level%<>%as.factor()
names(Auto)
length(names(Auto))
ra_best<-svm(mpg_level~.,data=Auto,kernel="radial",cost=1,gamma=1,degree=2)
po_best<-svm(mpg_level~.,data=Auto,kernel="polynomial",cost=0.01,gamma=1,degree=3)
plotvar = function(model) {
for (name in names(Auto)[-10]) {
plot(model, Auto, as.formula(paste("mpg~", name, sep = "")))
}
}
plotvar(ra_best)
names(Auto)[-10]
ra_best<-svm(mpg_level~.,data=Auto,kernel="radial",cost=1,gamma=1,degree=2)
po_best<-svm(mpg_level~.,data=Auto,kernel="polynomial",cost=0.01,gamma=1,degree=3)
plotvar = function(model) {
for (name in names(Auto)[-10]) {
plot(model, Auto[,-10], as.formula(paste("mpg~", name, sep = "")))
}
}
plotvar(ra_best)
plot(ra_best,Auto,mpg~cylinders)
plot(ra_best,Auto,mpg_level~cylinders)
plot(ra_best,Auto,as.numeirc(mpg_level)~cylinders)
plot(ra_best,Auto,as.numeric(mpg_level)~cylinders)
ra_best<-svm(mpg_level~.,data=Auto,kernel="radial",cost=1,gamma=1)
po_best<-svm(mpg_level~.,data=Auto,kernel="polynomial",cost=0.01,gamma=1,degree=3)
plotvar = function(model) {
for (name in names(Auto)[-10]) {
plot(model, Auto[,-10], as.formula(paste("mpg~", name, sep = "")))
}
}
plotvar(ra_best)
ra_best<-svm(mpg_level~.,data=Auto,kernel="radial",cost=1,gamma=1)
po_best<-svm(mpg_level~.,data=Auto,kernel="polynomial",cost=0.01,gamma=1,degree=3)
plotvar = function(model) {
for (name in names(Auto)[-c(1,10)]) {
plot(model, Auto[,-10], as.formula(paste("mpg~", name, sep = "")))
}
}
plotvar(ra_best)
names(Auto)
colnames(Auto)
colnames(Auto)%>%length()
var <- ifelse(Auto$mpg > median(Auto$mpg), 1, 0)
Auto$mpglevel <- as.factor(var)
svm.linear <- svm(mpglevel ~ ., data = Auto, kernel = "linear", cost = 1)
svm.poly <- svm(mpglevel ~ ., data = Auto, kernel = "polynomial", cost = 100, degree = 2)
svm.radial <- svm(mpglevel ~ ., data = Auto, kernel = "radial", cost = 100, gamma = 0.01)
plotpairs = function(fit) {
for (name in names(Auto)[!(names(Auto) %in% c("mpg", "mpglevel", "name"))]) {
plot(fit, Auto, as.formula(paste("mpg~", name, sep = "")))
}
}
plotpairs(svm.linear)
var <- ifelse(Auto$mpg > median(Auto$mpg), 1, 0)
Auto$mpglevel <- as.factor(var)
svm.linear <- svm(mpglevel ~ ., data = Auto, kernel = "linear", cost = 1)
svm.poly <- svm(mpglevel ~ ., data = Auto, kernel = "polynomial", cost = 100, degree = 2)
svm.radial <- svm(mpglevel ~ ., data = Auto, kernel = "radial", cost = 100, gamma = 0.01)
plotpairs = function(fit) {
for (name in names(Auto)[!(names(Auto) %in% c("mpg", "mpglevel", "name"))]) {
plot(fit, Auto, as.formula(paste("mpg~", name, sep = "")))
}
}
plotpairs(svm.linear)
plotpairs(svm.poly)
plotpairs(svm.radial)
Auto$mpg_level<-ifelse(Auto$mpg>median(Auto$mpg),1,0)
Auto$mpg_level%<>%as.factor()
names(Auto)
ra_best<-svm(mpg_level~.,data=Auto,kernel="radial",cost=1,gamma=1)
po_best<-svm(mpg_level~.,data=Auto,kernel="polynomial",cost=0.01,gamma=1,degree=3)
plotvar = function(model) {
for (name in names(Auto)[-c(1,9,10)]) {
plot(model, Auto, as.formula(paste("mpg~", name, sep = "")))
}
}
plotvar(ra_best)
plotvar(po_best)
tune_gas2<-tune(svm,mpg_level~.,data=Auto,kernel="radial",ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100),gamma=c(0.5,1,2,3,4),degree=c(2,3,4,5,6)))
tune_gas3<-tune(svm,mpg_level~.,data=Auto,kernel="polynomial",ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100),gamma=c(0.5,1,2,3,4),degree=c(2,3,4,5,6)))
summary(tune_gas2)
summary(tune_gas3)
tune_gas2<-tune(svm,mpg_level~.,data=Auto,kernel="radial",ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100),gamma=c(0.5,1,2,3,4))))
tune_gas2<-tune(svm,mpg_level~.,data=Auto,kernel="radial",ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100),gamma=c(0.5,1,2,3,4)))
tune_gas3<-tune(svm,mpg_level~.,data=Auto,kernel="polynomial",ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100),gamma=c(0.5,1,2,3,4),degree=c(2,3,4,5,6)))
summary(tune_gas2)
summary(tune_gas3)
ra_best<-svm(mpg_level~.,data=Auto,kernel="radial",cost=5,gamma=0.5)
po_best<-svm(mpg_level~.,data=Auto,kernel="polynomial",cost=5,gamma=0.5,degree=3)
plotvar = function(model) {
for (name in names(Auto)[-c(1,9,10)]) {
plot(model, Auto, as.formula(paste("mpg~", name, sep = "")))
}
}
plotvar(ra_best)
plotvar(po_best)
ra_best<-svm(mpg_level~.,data=Auto,kernel="radial",cost=5,gamma=0.5)
po_best<-svm(mpg_level~.,data=Auto,kernel="polynomial",cost=5,gamma=0.5,degree=3)
plotvar = function(model) {
for (name in names(Auto)[-c(1,9,10)]) {
plot(model, Auto, as.formula(paste("mpg_level~", name, sep = "")))
}
}
plotvar(ra_best)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load("knitr","ggplot2","dplyr","tidyverse","magrittr","ISLR","e1071","SparseM","ROCR")
rocplot(ra_best,Auto$mpg_level)
library(ROCR)
install.packages("ROCR")
install.packages("ROCR")
library(ROCR)
version()
version
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load("knitr","ggplot2","dplyr","tidyverse","magrittr","ISLR","e1071","SparseM","ROCR")
plotvar(ra_best)
performance(ra_best,Auto$mpg_level)
performance(predict(ra_best),Auto$mpg_level)
index<-sample(1:nrow(OJ),800,replace=FALSE)
train<-OJ[index,]
test<-OJ[!index,]
OJ_svm<-svm(Purchase~.,data=train,cost=0.01)
summary(OJ_svm)
table(OJ_svm$fitted,train$Purchase)
class(Purchase)
class(train$Purchase)
train$Purchase
OJ_pred<-predict(OJ_svm,newdata=test,type="response")
View(OJ_pred)
OJ_pred
OJ_svm
ra_best
OJ_pred<-predict(OJ_svm,newdata=test,decision.values=T)
?svm()
table(OJ_svm$fitted,train$Purchase,decisions.values=T)
table(OJ_svm$fitted,train$Purchase,decision.values=T)
OJ_svm<-svm(Purchase~.,data=train,cost=0.01,decision.values=T)
summary(OJ_svm)
table(OJ_svm$fitted,train$Purchase)
OJ_pred<-predict(OJ_svm,newdata=test,decision.values=T)
OJ_pred<-predict(OJ_svm,newdata = test,decision.values=T)
index<-sample(1:nrow(OJ),800,replace=FALSE)
train<-OJ[index,]
test<-OJ[!index,]
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load("knitr","ggplot2","dplyr","tidyverse","magrittr","ISLR","e1071","SparseM","ROCR")
index<-sample(1:nrow(OJ),800,replace=FALSE)
train<-OJ[index,]
test<-OJ[!index,]
OJ
index<-sample(800,1:nrow(OJ),replace=FALSE)
?sample()
nrow(OJ)
index<-sample(1:nrow(OJ),800,replace=FALSE)
train<-OJ[index,]
test<-OJ[-index,]
table(OJ_svm$fitted,train$Purchase)
OJ_svm<-svm(Purchase~.,data=train,cost=0.01,decision.values=T)
summary(OJ_svm)
table(OJ_svm$fitted,train$Purchase)
OJ_pred<-predict(OJ_svm,newdata = test,decision.values=T)
OJ_pred<-ifelse()
table(train$Purchase,OJ_pred)
table(OJ_svm$fitted,train$Purchase)
?table()
a <- letters[1:3]
table(a, sample(a))
temp<-sample(a)
temp
table(a,sample(a))
table(pred=OJ_svm$fitted,true=train$Purchase)
table(pred=OJ_svm$fitted,true=train$Purchase)
OJ_pred<-predict(OJ_svm,newdata = test,decision.values=T)
table(pred=OJ_pred,true=train$Purchase)
table(pred=OJ_pred,true=test$Purchase)
OJ_svm<-svm(Purchase~.,data=train,cost=0.01,kernel="linear",decision.values=T)
summary(OJ_svm)
table(pred=OJ_svm$fitted,true=train$Purchase)
OJ_pred<-predict(OJ_svm,newdata = test,decision.values=T)
table(pred=OJ_pred,true=test$Purchase)
set.seed(1)
table(pred=OJ_svm$fitted,true=train$Purchase)
OJ_pred<-predict(OJ_svm,newdata = test,decision.values=T)
table(pred=OJ_pred,true=test$Purchase)
set.seed(1)
table(pred=OJ_svm$fitted,true=train$Purchase)
paste("train error rate is",(81+59)/(800))
OJ_pred<-predict(OJ_svm,newdata = test,decision.values=T)
table(pred=OJ_pred,true=test$Purchase)
paste("train error rate is",(23+15)/(270))
set.seed(1)
table(pred=OJ_svm$fitted,true=train$Purchase)
paste("train error rate is",round((81+59)/(800),2))
OJ_pred<-predict(OJ_svm,newdata = test,decision.values=T)
table(pred=OJ_pred,true=test$Purchase)
paste("train error rate is",round((23+15)/(270),2))
tune_oj<-tune(svm,train,Purchase~.,ranges=list(cost=c(0.01,0.1,1,5,10)))
tune_oj<-tune(svm,Purchase~.,data=train,kernal="linear",ranges=list(cost=c(0.01,0.1,1,5,10)))
summary(tune_oj)
predict(tune_oj,newdata=test)
tune_oj<-tune(svm,Purchase~.,data=train,kernal="linear",ranges=list(cost=c(0.01,0.1,1,5,10)))
summary(tune_oj)
OJ_svm2<-svm(Purchase~.,data=train,cost=1,kernel="linear",decision.values=T)
set.seed(1)
table(pred=OJ_svm2$fitted,true=train$Purchase)
paste("train error rate is",round((81+59)/(800),2))
OJ_pred2<-predict(OJ_svm2,newdata = test,decision.values=T)
table(pred=OJ_pred2,true=test$Purchase)
paste("train error rate is",round((23+15)/(270),2))
OJ_svm2<-svm(Purchase~.,data=train,cost=1,kernel="linear",decision.values=T)
set.seed(1)
table(pred=OJ_svm2$fitted,true=train$Purchase)
paste("train error rate is",round((75+59)/(800),2))
OJ_pred2<-predict(OJ_svm2,newdata = test,decision.values=T)
table(pred=OJ_pred2,true=test$Purchase)
paste("train error rate is",round((23+16)/(270),2))
OJ_svm<-svm(Purchase~.,data=train,cost=0.01,kernel="linear",decision.values=T)
summary(OJ_svm)
set.seed(1)
table(pred=OJ_svm$fitted,true=train$Purchase)
paste("train error rate is",round((81+59)/(800),2))
OJ_pred<-predict(OJ_svm,newdata = test,decision.values=T)
table(pred=OJ_pred,true=test$Purchase)
paste("train error rate is",round((23+15)/(270),2))
OJ_svm2<-svm(Purchase~.,data=train,cost=1,kernel="linear",decision.values=T)
set.seed(1)
table(pred=OJ_svm2$fitted,true=train$Purchase)
paste("train error rate is",round((75+59)/800,2))
OJ_pred2<-predict(OJ_svm2,newdata = test,decision.values=T)
table(pred=OJ_pred2,true=test$Purchase)
paste("train error rate is",round((23+16)/270,2))
428+232+81+59
index<-sample(1:nrow(OJ),800,replace=FALSE)
train<-OJ[index,]
test<-OJ[-index,]
OJ_svm<-svm(Purchase~.,data=train,cost=0.01,kernel="linear",decision.values=T)
summary(OJ_svm)
set.seed(1)
table(pred=OJ_svm$fitted,true=train$Purchase)
paste("train error rate is",round((81+59)/(800),2))
OJ_pred<-predict(OJ_svm,newdata = test,decision.values=T)
table(pred=OJ_pred,true=test$Purchase)
paste("train error rate is",round((23+15)/(270),2))
set.seed(1)
table(pred=OJ_svm$fitted,true=train$Purchase)
paste("train error rate is",round((75+65)/(800),2))
OJ_pred<-predict(OJ_svm,newdata = test,decision.values=T)
table(pred=OJ_pred,true=test$Purchase)
paste("train error rate is",round((33+15)/(270),2))
tune_oj<-tune(svm,Purchase~.,data=train,kernal="linear",ranges=list(cost=c(0.01,0.1,1,5,10)))
summary(tune_oj)
OJ_svm2<-svm(Purchase~.,data=train,cost=1,kernel="linear",decision.values=T)
set.seed(1)
table(pred=OJ_svm2$fitted,true=train$Purchase)
paste("train error rate is",round((75+59)/800,2))
OJ_pred2<-predict(OJ_svm2,newdata = test,decision.values=T)
table(pred=OJ_pred2,true=test$Purchase)
paste("train error rate is",round((23+16)/270,2))
OJ_svm2<-svm(Purchase~.,data=train,cost=1,kernel="linear",decision.values=T)
set.seed(1)
table(pred=OJ_svm2$fitted,true=train$Purchase)
paste("train error rate is",round((70+61)/800,2))
OJ_pred2<-predict(OJ_svm2,newdata = test,decision.values=T)
table(pred=OJ_pred2,true=test$Purchase)
paste("train error rate is",round((29+13)/270,2))
set.seed(1)
index<-sample(1:nrow(OJ),800,replace=FALSE)
train<-OJ[index,]
test<-OJ[-index,]
OJ_svm<-svm(Purchase~.,data=train,cost=0.01,kernel="linear",decision.values=T)
summary(OJ_svm)
set.seed(1)
table(pred=OJ_svm$fitted,true=train$Purchase)
paste("train error rate is",round((75+65)/(800),2))
OJ_pred<-predict(OJ_svm,newdata = test,decision.values=T)
table(pred=OJ_pred,true=test$Purchase)
paste("train error rate is",round((33+15)/(270),2))
OJ_svm2<-svm(Purchase~.,data=train,cost=1,kernel="linear",decision.values=T)
set.seed(1)
table(pred=OJ_svm2$fitted,true=train$Purchase)
paste("train error rate is",round((70+61)/800,2))
OJ_pred2<-predict(OJ_svm2,newdata = test,decision.values=T)
table(pred=OJ_pred2,true=test$Purchase)
paste("train error rate is",round((29+13)/270,2))
tune_oj2<-tune(svm,Purchase~.,data=train,kernal="radial",ranges=list(cost=c(0.01,0.1,1,5,10)))
summary(tune_oj2)
OJ_svm3<-svm(Purchase~.,data=train,cost=1,kernel="radial",decision.values=T)
set.seed(1)
table(pred=OJ_svm3$fitted,true=train$Purchase)
paste("train error rate is",round((70+61)/800,2))
OJ_pred3<-predict(OJ_svm3,newdata = test,decision.values=T)
table(pred=OJ_pred3,true=test$Purchase)
paste("test error rate is",round((29+13)/270,2))
OJ_svm3<-svm(Purchase~.,data=train,cost=1,kernel="radial",decision.values=T)
set.seed(1)
table(pred=OJ_svm3$fitted,true=train$Purchase)
paste("train error rate is",round((77+44)/800,2))
OJ_pred3<-predict(OJ_svm3,newdata = test,decision.values=T)
table(pred=OJ_pred3,true=test$Purchase)
paste("test error rate is",round((33+17)/270,2))
tune_oj3<-tune(svm,Purchase~.,data=train,kernal="polynomial",ranges=list(cost=c(0.01,0.1,1,5,10),degree=2))
summary(tune_oj3)
OJ_svm4<-svm(Purchase~.,data=train,cost=1,kernel="polynomial",degree=2,decision.values=T)
set.seed(1)
table(pred=OJ_svm4$fitted,true=train$Purchase)
paste("train error rate is",round((77+44)/800,2))
OJ_pred4<-predict(OJ_svm4,newdata = test,decision.values=T)
table(pred=OJ_pred4,true=test$Purchase)
paste("test error rate is",round((33+17)/270,2))
OJ_svm4<-svm(Purchase~.,data=train,cost=1,kernel="polynomial",degree=2,decision.values=T)
set.seed(1)
table(pred=OJ_svm4$fitted,true=train$Purchase)
paste("train error rate is",round((110+36)/800,2))
OJ_pred4<-predict(OJ_svm4,newdata = test,decision.values=T)
table(pred=OJ_pred4,true=test$Purchase)
paste("test error rate is",round((45+15)/270,2))
OJ_svm3<-svm(Purchase~.,data=train,cost=1,kernel="radial",decision.values=T)
set.seed(1)
table(pred=OJ_svm3$fitted,true=train$Purchase)
paste("train error rate is",round((77+44)/800,2))
OJ_pred3<-predict(OJ_svm3,newdata = test,decision.values=T)
table(pred=OJ_pred3,true=test$Purchase)
paste("test error rate is",round((33+17)/270,2))
load("C:/Desktop/MSSP/MA676/Patterson Consulting/.RData")
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load("tidyverse","xlsx","magrittr","tidyr","readxl")
ggplot(data=priorityrank,aes(x=Field,y=meanrank,col=Frequency))+geom_point()+ggtitle("Mean  rank over Frequency")+theme(text = element_text(size=20),
axis.text.x = element_text(angle=45, hjust=1))
priority%>%group_by(Frequency,Field)%>%summarise(meanrank=mean(Rank))%>%
arrange(desc(meanrank))->priorityrank
priorityrank%<>%separate(Field,c("Question","Rank","Field"),sep=" ")
priorityrank%<>%select(-c("Question","Rank"))
ggplot(data=priorityrank,aes(x=Field,y=meanrank,col=Frequency))+geom_point()+ggtitle("Mean  rank over Frequency")+theme(text = element_text(size=15),
axis.text.x = element_text(angle=45, hjust=1))
priority%>%group_by(Size,Field)%>%summarise(meanrank=mean(Rank))%>%
arrange(desc(meanrank))->priorityrank2
priorityrank2%<>%separate(Field,c("Question","Rank","Field"),sep=" ")
priorityrank2%<>%select(-c("Question","Rank"))
ggplot(data=priorityrank2,aes(x=Field,y=meanrank,col=Size))+geom_point()+ggtitle("Mean  rank over Size")+theme(text = element_text(size=15),
axis.text.x = element_text(angle=45, hjust=1))
priority%>%group_by(Age,Field)%>%summarise(meanrank=mean(Rank))%>%
arrange(desc(meanrank))->priorityrank3
priorityrank3%<>%separate(Field,c("Question","Rank","Field"),sep=" ")
priorityrank3%<>%select(-c("Question","Rank"))
ggplot(data=priorityrank3,aes(x=Field,y=meanrank,col=Age))+geom_point()+ggtitle("Mean  rank over Age")+theme(text = element_text(size=15),
axis.text.x = element_text(angle=45, hjust=1))
library(ggplot2)
source('C:/Desktop/MSSP/MA676/Patterson Consulting/Patterson.R', echo=TRUE)
setwd("C://Desktop//MSSP//MA676")
setwd("C:/Desktop/MSSP/MA676/Patterson Consulting")
source('C:/Desktop/MSSP/MA676/Patterson Consulting/Patterson.R', echo=TRUE)
model2 <- multinom(Rank ~ Frequency + Age + Size, data = survey_data)
View(survey_data)
# create a variable which indicates the organization's #1 priority
# code below isn't working
survey_data$Priority <- ifelse(survey_data$`Q21.11 Rank Awareness`==1, "Awareness", "none")
survey_data$Priority <- ifelse(survey_data$`Q21.12 Rank Fam Edu`==1, "Fam Edu", survey_data$Priority)
survey_data$Priority <- ifelse(survey_data$`Q21.13 Rank Provider Edu`==1, "Provider Edu", survey_data$Priority)
survey_data$Priority <- ifelse(survey_data$`Q21.14 Rank Support Fam`==1, "Support Fam", survey_data$Priority)
survey_data$Priority <- ifelse(survey_data$`Q21.15 Rank Resource`==1, "Resource", survey_data$Priority)
survey_data$Priority <- ifelse(survey_data$`Q21.16 Rank Research`==1, "Research", survey_data$Priority)
survey_data$Priority <- ifelse(survey_data$`Q21.17 Rank Research Policy`==1, "Research Policy", survey_data$Priority)
survey_data$Priority <- ifelse(survey_data$`Q21.18 Rank Advocacy`==1, "Advocacy", survey_data$Priority)
survey_data$Priority
